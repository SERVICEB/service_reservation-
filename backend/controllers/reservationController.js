import Reservation from '../models/Reservation.js';
import Residence from '../models/Residence.js';

export const createReservation = async (req, res) => {
  try {
    // Le frontend envoie residenceId, on le r√©cup√®re ici
    const { residenceId, startDate, endDate, totalPrice, guestCount, notes } = req.body;

    // On r√©cup√®re l'ID utilisateur depuis le middleware d'authentification (req.user)
    const userId = req.user?.id;

    // Debug : v√©rifier les donn√©es re√ßues
    console.log('üìã Donn√©es re√ßues :', { userId, residenceId, startDate, endDate, totalPrice, guestCount, notes });

    // Validation basique des champs requis
    if (!userId) return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
    if (!residenceId || !startDate || !endDate || !totalPrice) {
      return res.status(400).json({ 
        message: 'Champs requis manquants.',
        required: ['residenceId', 'startDate', 'endDate', 'totalPrice'],
        received: { residenceId, startDate, endDate, totalPrice }
      });
    }

    // Validation du type totalPrice
    if (typeof totalPrice !== 'number' || totalPrice <= 0) {
      return res.status(400).json({ message: 'Le prix total doit √™tre un nombre positif' });
    }
    if (guestCount && (typeof guestCount !== 'number' || guestCount < 1)) {
      return res.status(400).json({ message: 'Le nombre d\'invit√©s doit √™tre un nombre positif' });
    }

    // Conversion des dates
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);
    if (isNaN(startDateObj.getTime()) || isNaN(endDateObj.getTime())) {
      return res.status(400).json({ message: 'Format de date invalide' });
    }
    if (endDateObj <= startDateObj) {
      return res.status(400).json({ message: 'La date de fin doit √™tre apr√®s la date de d√©but' });
    }

    // V√©rifier que la r√©sidence existe
    const residence = await Residence.findById(residenceId);
    if (!residence) return res.status(404).json({ message: 'R√©sidence non trouv√©e' });

    // V√©rifier que l'utilisateur ne r√©serve pas sa propre r√©sidence
    if (residence.owner.toString() === userId) {
      return res.status(400).json({ message: 'Vous ne pouvez pas r√©server votre propre r√©sidence' });
    }

    // V√©rifier conflit de r√©servations
    const conflictingReservation = await Reservation.findOne({
      residenceId: residenceId, // Chang√© de 'residence' √† 'residenceId'
      status: { $ne: 'annul√©e' },
      $or: [
        {
          startDate: { $lt: endDateObj },
          endDate: { $gt: startDateObj }
        }
      ]
    });
    if (conflictingReservation) {
      return res.status(409).json({ 
        message: 'Ces dates ne sont pas disponibles.',
        conflictingDates: {
          start: conflictingReservation.startDate,
          end: conflictingReservation.endDate
        }
      });
    }

    // Pr√©parer les donn√©es pour Mongoose (utiliser les noms de champs corrects)
    const reservationData = {
      userId: userId,                // Chang√© de 'user' √† 'userId'
      residenceId: residenceId,      // Chang√© de 'residence' √† 'residenceId'
      startDate: startDateObj,
      endDate: endDateObj,
      totalPrice,
      guestCount: guestCount || 1,
      status: 'en attente',
      ...(notes && { notes: notes.trim() }),
    };

    console.log('üìã Donn√©es √† ins√©rer:', reservationData);

    // Cr√©er la r√©servation Mongoose
    const reservation = new Reservation(reservationData);

    // Valider avant sauvegarde
    const validationError = reservation.validateSync();
    if (validationError) {
      console.error('‚ùå Validation Error:', validationError);
      return res.status(400).json({
        message: 'Erreur de validation des donn√©es',
        errors: validationError.errors
      });
    }

    // Sauvegarder dans la base
    await reservation.save();

    // Populer user et residence pour la r√©ponse (adapter selon votre sch√©ma)
    // Si votre sch√©ma utilise userId/residenceId, vous devrez peut-√™tre ajuster le populate
    await reservation.populate('userId', 'name email');
    await reservation.populate('residenceId', 'title location price');

    console.log('‚úÖ R√©servation cr√©√©e:', reservation._id);
    res.status(201).json(reservation);

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error);

    // Gestion des erreurs mongoose
    if (error.name === 'ValidationError') {
      return res.status(400).json({ message: 'Erreur de validation des donn√©es', errors: error.errors });
    }

    // Gestion des erreurs JSON Schema MongoDB (code 121)
    if (error.code === 121) {
      return res.status(400).json({ message: 'Les donn√©es ne respectent pas le sch√©ma de validation', details: error.errInfo });
    }

    // Autres erreurs
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};